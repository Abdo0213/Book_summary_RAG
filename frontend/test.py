import streamlit as st
import os
import json
import hashlib
import time
from pathlib import Path
import base64
import requests
from io import BytesIO

#pip install PyPDF2 gtts openai streamlit

# For PDF processing (you'll need to install these)
# import PyPDF2
# from gtts import gTTS
# import openai

# Mock implementations for demonstration
class MockPDFProcessor:
    def extract_text(self, pdf_file):
        return "This is a mock text extraction from a PDF file. In a real implementation, this would contain the actual text content from the uploaded PDF document. The text would then be sent to a summarization API or processed locally to generate a concise summary of the document's main points and key information."
    
    def summarize_text(self, text):
        return "This is a mock summary of the PDF document. In a real application, this would be generated by an AI model that analyzes the content and extracts the most important information, key points, and conclusions from the document. The summary would help users quickly understand the document's content without reading the entire text."

class MockTextToSpeech:
    def text_to_speech(self, text):
        # In a real implementation, this would generate audio
        return "mock_audio.mp3"

class MockChatAI:
    def chat(self, message, context):
        return "This is a mock AI response. In a real implementation, the AI would analyze both your question and the PDF content to provide helpful, context-aware answers based on the document you've uploaded."

# Initialize mock services
pdf_processor = MockPDFProcessor()
tts = MockTextToSpeech()
chat_ai = MockChatAI()

# App configuration
st.set_page_config(
    page_title="DocuMind AI",
    page_icon="📄",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for modern styling
def local_css():
    st.markdown("""
    <style>
    :root {
        --primary: #4a6fa5;
        --secondary: #166088;
        --accent: #4cb5ae;
        --light: #f8f9fa;
        --dark: #343a40;
    }
    
    .main {
        background-color: #f5f7fa;
    }
    
    .stButton>button {
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .primary-btn {
        background-color: var(--primary) !important;
        color: white !important;
        border: none !important;
    }
    
    .secondary-btn {
        background-color: var(--secondary) !important;
        color: white !important;
        border: none !important;
    }
    
    .accent-btn {
        background-color: var(--accent) !important;
        color: white !important;
        border: none !important;
    }
    
    .card {
        background-color: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        margin-bottom: 1.5rem;
    }
    
    .header {
        background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
        color: white;
        padding: 2rem;
        border-radius: 0 0 12px 12px;
        margin-bottom: 2rem;
    }
    
    .chat-message {
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
    }
    
    .chat-message.user {
        background-color: #e3f2fd;
        margin-left: 20%;
    }
    
    .chat-message.assistant {
        background-color: #f5f5f5;
        margin-right: 20%;
    }
    
    .icon-btn {
        background: none !important;
        border: none !important;
        font-size: 1.5rem !important;
        cursor: pointer;
    }
    
    .upload-area {
        border: 2px dashed #ccc;
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        transition: all 0.3s ease;
    }
    
    .upload-area:hover {
        border-color: var(--primary);
        background-color: #f8fbff;
    }
    
    .feature-card {
        text-align: center;
        padding: 1.5rem;
        border-radius: 12px;
        background: white;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
        height: 100%;
    }
    
    .feature-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
    }
    
    .feature-icon {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        color: var(--primary);
    }
    </style>
    """, unsafe_allow_html=True)

local_css()

# User authentication functions
def make_hashes(password):
    return hashlib.sha256(str.encode(password)).hexdigest()

def check_hashes(password, hashed_text):
    return make_hashes(password) == hashed_text

def login_user(username, password):
    if username in st.session_state.users and check_hashes(password, st.session_state.users[username]['password']):
        st.session_state.logged_in = True
        st.session_state.current_user = username
        return True
    return False

def register_user(username, password, email):
    if username in st.session_state.users:
        return False
    st.session_state.users[username] = {
        'password': make_hashes(password),
        'email': email,
        'created_at': time.time()
    }
    # Save users to session state
    return True

# Initialize session state
if 'users' not in st.session_state:
    st.session_state.users = {}
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'current_user' not in st.session_state:
    st.session_state.current_user = None
if 'uploaded_file' not in st.session_state:
    st.session_state.uploaded_file = None
if 'summary' not in st.session_state:
    st.session_state.summary = None
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

# File upload and processing functions
def save_uploaded_file(uploaded_file):
    try:
        # Create uploads directory if it doesn't exist
        os.makedirs("uploads", exist_ok=True)
        
        # Save file
        file_path = os.path.join("uploads", uploaded_file.name)
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        st.session_state.uploaded_file = file_path
        return True
    except Exception as e:
        st.error(f"Error saving file: {e}")
        return False

def generate_summary():
    if st.session_state.uploaded_file:
        # Extract text from PDF
        extracted_text = pdf_processor.extract_text(st.session_state.uploaded_file)
        
        # Generate summary
        st.session_state.summary = pdf_processor.summarize_text(extracted_text)
        return st.session_state.summary
    else:
        st.error("Please upload a PDF file first")
        return None

def text_to_speech(text):
    try:
        # Generate audio file
        audio_file = tts.text_to_speech(text)
        
        # Read audio file and encode for download
        with open(audio_file, "rb") as f:
            audio_bytes = f.read()
        
        return audio_bytes
    except Exception as e:
        st.error(f"Error generating audio: {e}")
        return None

def chat_with_ai(message):
    # Get context from uploaded PDF
    context = ""
    if st.session_state.uploaded_file:
        context = pdf_processor.extract_text(st.session_state.uploaded_file)
    
    # Get response from AI
    response = chat_ai.chat(message, context)
    
    # Add to chat history
    st.session_state.chat_history.append({
        "role": "user",
        "content": message,
        "timestamp": time.time()
    })
    st.session_state.chat_history.append({
        "role": "assistant",
        "content": response,
        "timestamp": time.time()
    })
    
    return response

# UI Components
def show_auth_form():
    auth_tab1, auth_tab2 = st.tabs(["Login", "Register"])
    
    with auth_tab1:
        with st.form("login_form"):
            st.subheader("Login to Your Account")
            login_username = st.text_input("Username", key="login_username")
            login_password = st.text_input("Password", type="password", key="login_password")
            login_submit = st.form_submit_button("Login", use_container_width=True)
            
            if login_submit:
                if login_user(login_username, login_password):
                    st.success("Logged in successfully!")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("Invalid username or password")
    
    with auth_tab2:
        with st.form("register_form"):
            st.subheader("Create New Account")
            reg_username = st.text_input("Username", key="reg_username")
            reg_email = st.text_input("Email", key="reg_email")
            reg_password = st.text_input("Password", type="password", key="reg_password")
            reg_confirm = st.text_input("Confirm Password", type="password", key="reg_confirm")
            register_submit = st.form_submit_button("Register", use_container_width=True)
            
            if register_submit:
                if reg_password != reg_confirm:
                    st.error("Passwords do not match")
                elif len(reg_password) < 6:
                    st.error("Password must be at least 6 characters")
                else:
                    if register_user(reg_username, reg_password, reg_email):
                        st.success("Account created successfully! Please login.")
                    else:
                        st.error("Username already exists")

def show_upload_section():
    st.markdown("""
    <div class="card">
        <h3>📄 Upload Your Document</h3>
        <p>Upload a PDF file to get started with summarization and AI chat.</p>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        uploaded_file = st.file_uploader(
            "Choose a PDF file", 
            type="pdf", 
            label_visibility="collapsed"
        )
        
        if uploaded_file is not None:
            if st.button("Process Document", use_container_width=True, type="primary"):
                with st.spinner("Saving and processing your document..."):
                    if save_uploaded_file(uploaded_file):
                        st.success("File uploaded successfully!")
    
    with col2:
        st.markdown("""
        <div style="text-align: center; padding: 1rem;">
            <div style="font-size: 3rem; margin-bottom: 1rem;">📁</div>
            <p>Supported format: PDF</p>
            <p>Max size: 10MB</p>
        </div>
        """, unsafe_allow_html=True)

def show_summary_section():
    if st.session_state.uploaded_file:
        st.markdown("""
        <div class="card">
            <h3>📋 Document Summary</h3>
            <p>Generate a concise summary of your uploaded document.</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            if st.button("Generate Summary", use_container_width=True, type="primary"):
                with st.spinner("Analyzing document and generating summary..."):
                    summary = generate_summary()
        
        with col2:
            if st.session_state.summary:
                # Generate audio and create download link
                audio_bytes = text_to_speech(st.session_state.summary)
                if audio_bytes:
                    st.download_button(
                        label="🔊 Download Audio",
                        data=audio_bytes,
                        file_name="summary_audio.mp3",
                        mime="audio/mpeg",
                        use_container_width=True
                    )
        
        if st.session_state.summary:
            st.markdown("""
            <div style="background-color: white; padding: 1.5rem; border-radius: 12px; margin-top: 1rem;">
                <h4>Summary</h4>
                <div style="background-color: #f8f9fa; padding: 1rem; border-radius: 8px; border-left: 4px solid var(--primary);">
            """, unsafe_allow_html=True)
            st.write(st.session_state.summary)
            st.markdown("</div></div>", unsafe_allow_html=True)

def show_chat_section():
    st.markdown("""
    <div class="card">
        <h3>💬 Chat with AI</h3>
        <p>Ask questions about your document and get AI-powered answers.</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Display chat history
    chat_container = st.container()
    
    with chat_container:
        for message in st.session_state.chat_history:
            if message["role"] == "user":
                st.markdown(f"""
                <div class="chat-message user">
                    <strong>You</strong>
                    <div>{message['content']}</div>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="chat-message assistant">
                    <strong>AI Assistant</strong>
                    <div>{message['content']}</div>
                </div>
                """, unsafe_allow_html=True)
    
    # Chat input
    st.markdown("<br>", unsafe_allow_html=True)
    chat_input = st.chat_input("Ask a question about your document...")
    
    if chat_input:
        # Add user message to chat
        st.session_state.chat_history.append({
            "role": "user",
            "content": chat_input,
            "timestamp": time.time()
        })
        
        # Get AI response
        with st.spinner("Thinking..."):
            response = chat_with_ai(chat_input)
        
        # Rerun to update chat display
        st.rerun()

def show_guest_features():
    st.markdown("""
    <div class="header">
        <h1>📄 DocuMind AI</h1>
        <p>Your intelligent document assistant for summarization and insights</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Feature highlights
    st.subheader("✨ Key Features")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-icon">📄</div>
            <h4>PDF Processing</h4>
            <p>Upload and extract text from PDF documents with ease</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-icon">📋</div>
            <h4>AI Summarization</h4>
            <p>Get concise summaries of your documents powered by AI</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="feature-card">
            <div class="feature-icon">💬</div>
            <h4>Document Chat</h4>
            <p>Ask questions and get insights about your uploaded documents</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Upload section for guests
    show_upload_section()
    
    if st.session_state.uploaded_file:
        show_summary_section()
        show_chat_section()

# Main app layout
def main():
    # Sidebar for authentication
    with st.sidebar:
        st.markdown("""
        <div style="text-align: center; margin-bottom: 2rem;">
            <h2>DocuMind AI</h2>
            <p>Intelligent Document Assistant</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.session_state.logged_in:
            st.success(f"Welcome, {st.session_state.current_user}!")
            if st.button("Logout", use_container_width=True):
                st.session_state.logged_in = False
                st.session_state.current_user = None
                st.rerun()
        else:
            show_auth_form()
        
        st.markdown("---")
        st.markdown("""
        <div style="padding: 1rem;">
            <h4>About</h4>
            <p>DocuMind AI helps you process, summarize, and chat with your documents using advanced AI technology.</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Main content area
    if st.session_state.logged_in or not st.session_state.logged_in:
        if st.session_state.logged_in:
            st.markdown(f"""
            <div class="header">
                <h1>Welcome back, {st.session_state.current_user}! 👋</h1>
                <p>Ready to work with your documents?</p>
            </div>
            """, unsafe_allow_html=True)
            
            show_upload_section()
            
            if st.session_state.uploaded_file:
                show_summary_section()
                show_chat_section()
        else:
            show_guest_features()

if __name__ == "__main__":
    main()